name: Deploy

on:
  workflow_run:
    workflows:
      - Test and Lint
    types:
      - completed
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  dev-client-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: dev

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - name: Deploy client
        uses: ./.github/actions/deploy-client
        with:
          deploy-env: dev
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          server-base-url: ${{ secrets.NEXT_PUBLIC_SERVER_BASE_URL }}
          app-env: development

  dev-server-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: dev

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

      - name: Construct image tag
        id: construct-image-tag
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_COMMIT: ${{ github.sha }}
        run: |
          BRANCH_PREFIX="$GIT_BRANCH"
          # use a generic prefix for all non-main branches
          if [[ "$BRANCH_PREFIX" != "main" ]]; then
            BRANCH_PREFIX="branch"
          fi
          BUILD_TIME=$(date '+%Y%m%d%H%M%S')
          IMAGE_TAG="${BRANCH_PREFIX}-${GIT_COMMIT}-${BUILD_TIME}"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - name: Build & Push image
        id: build-image
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          push: true
          context: server
          tags: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-server-dev:${{ steps.construct-image-tag.outputs.image-tag }}

      - name: Scan server image
        uses: ./.github/actions/image-scan
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-server-dev:${{ steps.construct-image-tag.outputs.image-tag }}

      - name: Deploy server
        uses: ./.github/actions/deploy-server
        with:
          deploy-env: dev
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          server-image: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-server-dev:${{ steps.construct-image-tag.outputs.image-tag }}
          db-migrations-subnet: ${{ secrets.DB_MIGRATIONS_SUBNET_DEV }}
          db-migrations-security-group: ${{ secrets.DB_MIGRATIONS_SECURITY_GROUP_DEV }}
          image-tag: ${{ steps.construct-image-tag.outputs.image-tag }}

      - name: Write server image tag to file
        env:
          IMAGE_TAG: ${{ steps.construct-image-tag.outputs.image-tag }}
        run: |
          mkdir -p tmp/artifact
          echo -n "$IMAGE_TAG" > tmp/artifact/server_image_tag.txt

      - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: server-image-tag
          path: tmp/artifact/server_image_tag.txt
          retention-days: 1

  test-client-deploy:
    needs: [dev-client-deploy, dev-server-deploy]
    runs-on: ubuntu-latest
    environment: test

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - name: Deploy client
        uses: ./.github/actions/deploy-client
        with:
          deploy-env: test
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_TEST }}
          server-base-url: ${{ secrets.NEXT_PUBLIC_SERVER_BASE_URL }}
          app-env: test

  test-server-deploy:
    needs: [dev-client-deploy, dev-server-deploy]
    runs-on: ubuntu-latest
    environment: test

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: server-image-tag
          path: tmp/artifact

      - name: Get server image tag
        id: get-image-tag
        run: |
          IMAGE_TAG=$(cat tmp/artifact/server_image_tag.txt)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # The server images do not need to be rebuilt in each environment. Instead,
      # promote and reuse the server images from the dev environment.
      # Server configurations that need to vary between environments can be set
      # at runtime through environment variables and/or spring boot profiles.
      - name: Deploy server
        uses: ./.github/actions/deploy-server
        with:
          deploy-env: test
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_TEST }}
          server-image: ${{ secrets.ECR_REGISTRY_DEV}}/dol-ui-claimant-intake-server-dev:${{ steps.get-image-tag.outputs.image-tag }}
          db-migrations-subnet: ${{ secrets.DB_MIGRATIONS_SUBNET_TEST }}
          db-migrations-security-group: ${{ secrets.DB_MIGRATIONS_SECURITY_GROUP_TEST }}
          image-tag: ${{ steps.get-image-tag.outputs.image-tag }}

  prod-client-deploy:
    needs: [test-client-deploy, test-server-deploy]
    runs-on: ubuntu-latest
    environment: prod

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - name: Deploy client
        uses: ./.github/actions/deploy-client
        with:
          deploy-env: prod
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          server-base-url: ${{ secrets.NEXT_PUBLIC_SERVER_BASE_URL }}
          app-env: prod

  prod-server-deploy:
    needs: [test-client-deploy, test-server-deploy]
    runs-on: ubuntu-latest
    environment: prod

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: server-image-tag
          path: tmp/artifact

      - name: Get server image tag
        id: get-image-tag
        run: |
          IMAGE_TAG=$(cat tmp/artifact/server_image_tag.txt)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # The server images do not need to be rebuilt in each environment. Instead,
      # promote and reuse the server images from the dev environment.
      # Server configurations that need to vary between environments can be set
      # at runtime through environment variables and/or spring boot profiles.
      - name: Deploy server
        uses: ./.github/actions/deploy-server
        with:
          deploy-env: prod
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          server-image: ${{ secrets.ECR_REGISTRY_DEV}}/dol-ui-claimant-intake-server-dev:${{ steps.get-image-tag.outputs.image-tag }}
          db-migrations-subnet: ${{ secrets.DB_MIGRATIONS_SUBNET_PROD }}
          db-migrations-security-group: ${{ secrets.DB_MIGRATIONS_SECURITY_GROUP_PROD }}
          image-tag: ${{ steps.get-image-tag.outputs.image-tag }}
