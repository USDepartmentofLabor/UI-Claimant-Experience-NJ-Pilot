name: Deploy Dev

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  client-deploy:
    runs-on: ubuntu-latest
    environment: dev

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Deploy client
        uses: ./.github/actions/deploy-client
        with:
          deploy-env: dev
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          server-base-url: ${{ secrets.NEXT_PUBLIC_SERVER_BASE_URL }}

  server-deploy:
    runs-on: ubuntu-latest
    environment: dev

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Construct image tag
        id: construct-image-tag
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_COMMIT: ${{ github.sha }}
        run: |
          BRANCH_PREFIX="$GIT_BRANCH"
          # use a generic prefix for all non-main branches
          if [[ "$BRANCH_PREFIX" != "main" ]]; then
            BRANCH_PREFIX="branch"
          fi
          BUILD_TIME=$(date '+%Y%m%d%H%M%S')
          IMAGE_TAG="${BRANCH_PREFIX}-${GIT_COMMIT}-${BUILD_TIME}"
          echo "::set-output name=image-tag::$IMAGE_TAG"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dol-ui-claimant-intake-server-dev
          IMAGE_TAG: ${{ steps.construct-image-tag.outputs.image-tag }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" server
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy server
        uses: ./.github/actions/deploy-server
        with:
          deploy-env: dev
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          server-image: ${{ steps.build-image.outputs.image }}
