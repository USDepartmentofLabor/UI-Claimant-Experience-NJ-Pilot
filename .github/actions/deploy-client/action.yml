name: Deploy Client
description: Deploy the frontend client application
inputs:
  deploy-env:
    description: The environment being deployed (e.g., dev, test, prod)
    required: true
  aws-role-to-assume:
    description: The AWS role to assume
    required: true
  server-base-url:
    description: The backend server base url
    required: true
  app-env:
    description: The application environment (e.g., development, test, production)
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
      with:
        python-version: "3.10"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: us-east-1

    - name: Build, Push, and Scan Client Image
      uses: ./.github/actions/build-client
      id: build-client
      with:
        deploy-env: ${{ inputs.deploy-env }}
        aws-role-to-assume: ${{ inputs.aws-role-to-assume }}
        server-base-url: ${{ inputs.server-base-url }}
        app-env: ${{ inputs.app-env }}

    - name: Set environment name in ECS task definition template
      shell: bash
      run: |
        make client-task-definition environment=${{ inputs.deploy-env }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574
      with:
        task-definition: ops/ecs/client-task-definition.json
        container-name: dol-ui-claimant-intake-client-${{ inputs.deploy-env }}
        image: ${{ steps.build-client.outputs.image-uri }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: dol-ui-claimant-intake-client
        cluster: dol-ui-claimant-intake-${{ inputs.deploy-env }}
        wait-for-service-stability: true
