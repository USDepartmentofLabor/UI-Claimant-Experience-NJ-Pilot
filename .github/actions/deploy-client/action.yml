name: Deploy Client
description: Deploy the frontend client application
inputs:
  deploy-env:
    description: The environment being deployed (e.g., dev, test, prod)
    required: true
  aws-role-to-assume:
    description: The AWS role to assume
    required: true
  server-base-url:
    description: The backend server base url
    required: true
  app-env:
    description: The application environment (e.g., development, test, production)
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
      with:
        python-version: "3.10"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

    - name: Construct image tag
      id: construct-image-tag
      env:
        GIT_BRANCH: ${{ github.ref_name }}
        GIT_COMMIT: ${{ github.sha }}
      shell: bash
      run: |
        BRANCH_PREFIX="$GIT_BRANCH"
        # use a generic prefix for all non-main branches
        if [[ "$BRANCH_PREFIX" != "main" ]]; then
          BRANCH_PREFIX="branch"
        fi
        BUILD_TIME=$(date '+%Y%m%d%H%M%S')
        IMAGE_TAG="${BRANCH_PREFIX}-${GIT_COMMIT}-${BUILD_TIME}"
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

    - name: Build & Push image
      id: build-image
      uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
      with:
        push: true
        context: client
        tags: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-client-${{ inputs.deploy-env }}:${{ steps.construct-image-tag.outputs.image-tag }}
        build-args: |
          NEXT_PUBLIC_SERVER_BASE_URL=${{ inputs.server-base-url }}
          NEXT_PUBLIC_APP_ENV=${{ inputs.app-env }}

    - name: Scan client image
      uses: ./.github/actions/image-scan
      with:
        image: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-client-${{ inputs.deploy-env }}:${{ steps.construct-image-tag.outputs.image-tag }}

    - name: Set environment name in ECS task definition template
      shell: bash
      run: |
        make client-task-definition environment=${{ inputs.deploy-env }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@f15ed65f9cc12455139db0f8e8ff6f6aaad6dfda
      with:
        task-definition: ops/ecs/client-task-definition.json
        container-name: dol-ui-claimant-intake-client-${{ inputs.deploy-env }}
        image: ${{ steps.login-ecr.outputs.registry }}/dol-ui-claimant-intake-client-${{ inputs.deploy-env }}:${{ steps.construct-image-tag.outputs.image-tag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: dol-ui-claimant-intake-client
        cluster: dol-ui-claimant-intake-${{ inputs.deploy-env }}
        wait-for-service-stability: true
