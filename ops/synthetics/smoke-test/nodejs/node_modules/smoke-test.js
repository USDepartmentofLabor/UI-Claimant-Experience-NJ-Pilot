const synthetics = require('Synthetics');

const AWS = require('aws-sdk');
const secretsManager = new AWS.SecretsManager();

const syntheticsConfiguration = synthetics.getConfiguration();

const getSecrets = async (secretName) => {
    var params = {
        SecretId: secretName
    };
    return await secretsManager.getSecretValue(params).promise();
};

const smokeTest = async function () {

    const secrets = await getSecrets(process.env.SECRETS_MANAGER_SECRET_NAME);
    const secretsObj = JSON.parse(secrets.SecretString);

    const url = secretsObj.application_url;

    syntheticsConfiguration.setConfig({
        includeRequestHeaders: true, // Enable if headers should be displayed in HAR
        includeResponseHeaders: true, // Enable if headers should be displayed in HAR
        restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
        restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
    });

    const page = await synthetics.getPage();

    await page.goto(url);
    await page.screenshot({path: '/tmp/smoke-test-001.png'});

    // click application sign-in button
    const signInButtonSelector = 'button#signIn';
    await page.waitForSelector(signInButtonSelector);
    await page.screenshot({path: '/tmp/smoke-test-002.png'});
    await page.click(signInButtonSelector);

    // enter username
    const usernameInputSelector = 'div:nth-child(2) > div > div > .cognito-asf #signInFormUsername';
    await page.waitForSelector(usernameInputSelector);
    await page.type(usernameInputSelector, secretsObj.username);

    // enter password
    const passwordInputSelector = 'div:nth-child(2) > div > div > .cognito-asf #signInFormPassword';
    await page.waitForSelector(passwordInputSelector);
    await page.type(passwordInputSelector, secretsObj.password);
    await page.screenshot({path: '/tmp/smoke-test-003.png'});

    // click cognito hosted UI sign-in button
    const cognitoSignInButtonSelector = 'div:nth-child(2) > div > div > .cognito-asf > .btn';
    await page.waitForSelector(cognitoSignInButtonSelector);

    // wait to be reirected back to the app
    await Promise.all([
      page.waitForNavigation(),
      page.click(cognitoSignInButtonSelector)
    ]);

    await page.screenshot({path: '/tmp/smoke-test-004.png'});

    // continue to claim
    const continueClaimSelector = 'button[data-testid="go-to-claim-form"]';
    await page.waitForSelector(continueClaimSelector);
    await page.screenshot({path: '/tmp/smoke-test-005.png'});
    await page.click(continueClaimSelector);

    // wait for access records page to load
    const accessRecordsSelector = 'h1[data-testid="claim-form-page-heading"]';
    await page.waitForSelector(accessRecordsSelector);

    await page.screenshot({path: '/tmp/smoke-test-006.png'});
};

exports.handler = async () => {
    return await smokeTest();
};
